name: SpringBoot+VUE CI/CD
on:
  push:
    branches: ["develop-wangyuting"]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis/redis-stack-server:latest
        ports:
          - "6379:6379"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/springboot-backend:${{ github.sha }}

      - name: Build Frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vue-frontend:${{ github.sha }}

      - name: Build Miniprogram image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.miniprogram
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/miniprogram-frontend:${{ github.sha }}

      - name: SSH Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: us.uwis.cn
          username: 2025ug01
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /home/2025ug01/springboot-vue-project
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/springboot-backend:${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vue-frontend:${{ github.sha }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/miniprogram-frontend:${{ github.sha }}
            
            # 清空并写入.env（避免覆盖）
            printf "" > .env
            echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "WECHAT_APPID=${{ secrets.WECHAT_APPID }}" >> .env
            echo "WECHAT_SECRET=${{ secrets.WECHAT_SECRET }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "ALITUN_ACCESS_KEY_ID=${{ secrets.ALITUN_ACCESS_KEY_ID }}" >> .env
            echo "ALITUN_ACCESS_KEY_SECRET=${{ secrets.ALITUN_ACCESS_KEY_SECRET }}" >> .env
            echo "XUNFEI_APPID=${{ secrets.XUNFEI_APPID }}" >> .env
            echo "XUNFEI_API_KEY=${{ secrets.XUNFEI_API_KEY }}" >> .env
            echo "XUNFEI_API_SECRET=${{ secrets.XUNFEI_API_SECRET }}" >> .env

            docker-compose down
            docker-compose up -d --build
